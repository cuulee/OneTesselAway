<html>
    <head>
        <style>
            body * {
                font-family: 'Courier New', Courier, monospace;
                font-size: 16px;
            }
            button {
                /* border-width: 2px; */
                font-size: 1em;
            }
            h1 {
                font-size: 2em;
            }
            h2 {
                font-size: 1.5em;
                margin-block-end: 0.5em;
                margin-block-start: 1.5em;
            }
            h3 {
                font-size: 1em;
            }

            .display {
                background-color: green;
                font-size: 1.2em;
                font-weight: bold;
                padding: 10px;
            }
            .text-area {
                font-size: 0.8em;
                height: 250px;
                padding: 10px;
                width: 100%;
            }

            .component-list {
                list-style-type: none;
            }
            .led {
                display: inline-block;
                height: 20px;
                width: 20px;
                box-sizing: border-box;
            }
            .led-label {
                margin-left: 10px;
            }

            .stoplight-led-row {
                display: flex;
                align-items: center;
                margin-bottom: 10px;
            }
            .led-missed {
                border: 2px solid red;
            }
            .led-steady {
                border: 2px solid orange;
            }
            .led-ready {
                border: 2px solid green;
            }

            .led-alarm {
                border: 2px solid blue;
            }
        </style>
    </head>
    <body>
        <h1>OneTesselAway Web UI</h1>

        <p>
            This is a simple web UI for the OneTesselAway device. It shows raw
            arrival info and device logs to help with diagnostics.
        </p>

        <h2>Simulated Device</h2>
        <p>
            This simulated state should match exactly what's currently on the
            device.
        </p>
        <h3>Display</h3>
        <pre id="displayLines" class="display"><%= displayLines %></pre>
        <h3>Stoplight LEDs</h3>
        <ul class="component-list">
            <li class="stoplight-led-row">
                <div class="led led-missed"></div>
                <div class="led-label">Missed</div>
            </li>
            <li class="stoplight-led-row">
                <div class="led led-steady"></div>
                <div class="led-label">Steady</div>
            </li>
            <li class="stoplight-led-row">
                <div class="led led-ready"></div>
                <div class="led-label">Ready</div>
            </li>
        </ul>
        <h3>Alarm</h3>
        <ul class="component-list">
            <li class="stoplight-led-row">
                <div class="led led-alarm"></div>
                <div class="led-label">Alarm LED</div>
            </li>
            <button class="btn-alarm-set">
                Set alarm
            </button>
        </ul>

        <h2>Extended Device Control</h2>
        <p>Additional controls and settings for the device.</p>
        <ul class="component-list">
            <button class="btn-alarm-play">
                Play alarm tune
            </button>
        </ul>

        <h2>Arrival Info</h2>
        <p>
            Latest "arrival info" state in memory, from which the display is
            derived
        </p>
        <textarea id="arrivalInfo" class="text-area">
<%= arrivalInfo %>
        </textarea>

        <h2>Device Logs</h2>
        <p>
            Device logs from the OneTesselAway program, latest first.
        </p>
        <textarea id="deviceLogs" class="text-area">
<%= deviceLogs %>
        </textarea>

        <!-- This client library is provided by the server -->
        <script src="/socket.io/socket.io.js"></script>
        <script>
            const socket = io.connect();

            // Document element references
            const ledAlarmEl = document.querySelector('.led-alarm');
            const btnAlarmSetEl = document.querySelector('.btn-alarm-set');
            const btnAlarmPlayEl = document.querySelector('.btn-alarm-play');

            // Web UI -> server event communication ----------------------------
            const store = {};

            // Emit an event to the server
            const emitEvent = (...rest) => {
                console.log('emitEvent', ...rest);
                socket.emit(...rest);
            };

            // When the server state updates a key...
            const onServerStateUpdate = (stateKey, cb) => {
                socket.on('updated:' + stateKey, updatedVal => {
                    console.log(
                        'onStateUpdatedEvent',
                        'updated:' + stateKey,
                        updatedVal,
                    );
                    store[stateKey] = updatedVal;
                    cb(updatedVal);
                });
            };

            // Set a key on the server state
            const setServerState = (key, val) =>
                emitEvent('setState', {
                    key: 'isAlarmEnabled',
                    val: !store.isAlarmEnabled,
                });

            // On device update ------------------------------------------------

            // Update the display when the device state updates
            socket.on('deviceStateUpdated', deviceState => {
                //console.log('Device state updated:', deviceState);

                // Update text-based elements
                Object.keys(deviceState).forEach(stateKey => {
                    const stateValue = deviceState[stateKey];
                    const el = document.querySelector(`#${stateKey}`);
                    if (el) {
                        el.innerHTML = stateValue;
                    }
                });

                // Update alarm
                if (deviceState.isAlarmEnabled) {
                    const ledAlarmColor = getComputedStyle(ledAlarmEl)
                        .borderColor;
                    ledAlarmEl.style.backgroundColor = ledAlarmColor;
                }
            });

            // Alarm -----------------------------------------------------------

            // Sync `isAlarmEnabled` state w/ server
            onServerStateUpdate('isAlarmEnabled', isAlarmEnabled => {
                const ledAlarmColor = getComputedStyle(ledAlarmEl).borderColor;
                ledAlarmEl.style.backgroundColor = isAlarmEnabled
                    ? ledAlarmColor
                    : 'white';
            });

            // Set button click handlers
            btnAlarmSetEl.onclick = e => {
                e.preventDefault();
                setServerState('isAlarmEnabled', !store.isAlarmEnabled);
            };

            btnAlarmPlayEl.onclick = e => {
                e.preventDefault();
                emitEvent('action:playAlarm', 'nyanIntro');
            };
        </script>
    </body>
</html>
