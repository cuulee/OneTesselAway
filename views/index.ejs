<html>
    <head>
        <link rel="shortcut icon" href="/static/favicon.ico" />
        <style>
            body * {
                font-family: 'Courier New', Courier, monospace;
                font-size: 16px;
            }
            button {
                /* border-width: 2px; */
                font-size: 1em;
            }
            h1 {
                font-size: 2em;
            }
            h2 {
                font-size: 1.5em;
                margin-block-end: 0.5em;
                margin-block-start: 1.5em;
            }
            h3 {
                font-size: 1em;
            }

            .lcd-screen {
                background-color: green;
                font-size: 1.2em;
                font-weight: bold;
                padding: 10px;
            }
            .text-area {
                font-size: 0.8em;
                height: 600px;
                padding: 10px;
                width: 100%;
            }

            .component-list {
                list-style-type: none;
            }
            .component-row {
                display: flex;
                align-items: center;
                margin-bottom: 10px;
            }
            .led {
                display: inline-block;
                height: 20px;
                width: 20px;
                box-sizing: border-box;
            }
            .component-label {
                margin-left: 10px;
            }

            .led-stoplight-miss {
                border: 2px solid red;
            }
            .led-stoplight-steady {
                border: 2px solid orange;
            }
            .led-stoplight-ready {
                border: 2px solid green;
            }

            .img-buzzer {
                height: 20px;
            }

            .led-alarm {
                border: 2px solid blue;
            }
        </style>
    </head>
    <body>
        <h1>OneTesselAway Web UI</h1>

        <p>
            This is a simple web UI for the OneTesselAway device. It shows raw
            arrival info and device logs to help with diagnostics.
        </p>

        <h2>Simulated Device</h2>
        <p>
            This simulated state should match exactly what's currently on the
            device.
        </p>
        <h3>LCD Screen</h3>
        <pre class="lcd-screen"><%= lcdScreenLines[0] %></pre>
        <pre class="lcd-screen"><%= lcdScreenLines[1] %></pre>
        <h3>Stoplight LEDs</h3>
        <ul class="component-list">
            <li class="component-row">
                <div class="led led-stoplight-miss"></div>
                <div class="component-label">Missed</div>
            </li>
            <li class="component-row">
                <div class="led led-stoplight-steady"></div>
                <div class="component-label">Steady</div>
            </li>
            <li class="component-row">
                <div class="led led-stoplight-ready"></div>
                <div class="component-label">Ready</div>
            </li>
        </ul>
        <h3>Alarm</h3>
        <ul class="component-list">
            <li class="component-row">
                <img class="img-buzzer" src="/static/buzzer-off.png" />
                <div class="component-label">Buzzer</div>
            </li>
            <li class="component-row">
                <div class="led led-alarm"></div>
                <div class="component-label">Alarm LED</div>
            </li>
            <button class="btn-alarm-set">
                Set alarm
            </button>
        </ul>

        <h2>Advanced Device Controls</h2>
        <p>Additional controls and settings for the device.</p>

        <h3>OneBusAway API Controls</h3>
        <p>
            Return an example OneBusAway API response for different traffic
            light states.
        </p>
        <ul class="component-list">
            <li class="component-row">
                <button class="btn-oba-eg-ready">Ready</button>
            </li>
            <li class="component-row">
                <button class="btn-oba-eg-steady">Steady</button>
            </li>
            <li class="component-row">
                <button class="btn-oba-eg-go">Go</button>
            </li>
            <li class="component-row">
                <button class="btn-oba-eg-miss">Miss</button>
            </li>
        </ul>

        <h3>Alarm Controls</h3>
        <ul class="component-list">
            <li class="component-row">
                <button class="btn-alarm-play">
                    Play alarm tune
                </button>
            </li>
        </ul>

        <h2>Global State</h2>
        <p>
            Contents of the global state
        </p>
        <textarea id="global-state" class="text-area">
<%= globalState %>
        </textarea>

        <h2>Device Logs</h2>
        <p>
            Device logs from the OneTesselAway program, latest first. Refresh
            browser to get latest logs.
        </p>
        <textarea id="device-logs" class="text-area">
<%= deviceLogs %>
        </textarea>

        <!-- This client library is provided by the server -->
        <script src="/socket.io/socket.io.js"></script>
        <%- injectConstants %> <%- injectGlobalState %>
        <script>
            const socket = io.connect();

            // Document element references -------------------------------------

            const btnAlarmSetEl = document.querySelector('.btn-alarm-set');
            const btnAlarmPlayEl = document.querySelector('.btn-alarm-play');
            const imgBuzzerEl = document.querySelector('.img-buzzer');
            const lcdScreenEls = document.querySelectorAll('.lcd-screen');
            const ledAlarmEl = document.querySelector('.led-alarm');
            const textGlobalStateEl = document.querySelector('#global-state');

            // Utilities -------------------------------------------------------

            const setLed = (ledEl, on) => {
                const ledColor = getComputedStyle(ledEl).borderColor;
                ledEl.style.backgroundColor = on ? ledColor : 'white';
            };

            // Web UI -> server event communication ----------------------------

            // Emit an event to the server
            const emitEvent = (eventName, ...rest) => {
                console.log('emitEvent', eventName, ...rest);
                socket.emit(eventName, ...rest);
            };

            // When the server state updates an item in the global store, call
            // the callback, and sync the front-end state with the back-end
            const onGlobalStateUpdate = (stateKey, cb) => {
                socket.on('updated:' + stateKey, updatedVal => {
                    console.log(
                        'onStateUpdatedEvent',
                        'updated:' + stateKey,
                        updatedVal,
                    );
                    globalState[stateKey] = updatedVal;
                    cb(updatedVal);
                });
            };

            // Set an item in the global server state
            const setServerState = (key, val) =>
                emitEvent('setState', key, val);

            // LCD Screen ------------------------------------------------------

            onGlobalStateUpdate('lcdScreenLines', screenLines => {
                lcdScreenEls.forEach(
                    (lcdScreenEl, i) =>
                        (lcdScreenEl.innerHTML =
                            screenLines[i] || lcdScreenEl.innerHTML),
                );
            });

            // Stoplight -------------------------------------------------------

            const updateStoplight = stoplightState => {
                constants.STOPLIGHT_LED_NAMES.forEach(ledName => {
                    const ledStoplightEl = document.querySelector(
                        '.led-stoplight-' + ledName,
                    );
                    setLed(
                        ledStoplightEl,
                        [constants.STOPLIGHT_STATES.GO, ledName].includes(
                            stoplightState,
                        ),
                    );
                });
            };

            // When the stoplight state is updated, turn on the corresponding
            // LED(s). Turn on all of them if stoplight state is 'go';
            onGlobalStateUpdate('stoplightState', updateStoplight);

            // Set stoplight on startup
            updateStoplight(globalState.stoplightState);

            // Alarm -----------------------------------------------------------

            // Speaker
            onGlobalStateUpdate('isAlarmPlaying', isAlarmPlaying => {
                imgBuzzerEl.src = `/static/buzzer-${
                    isAlarmPlaying ? 'on.gif' : 'off.png'
                }`;
            });

            // LED
            onGlobalStateUpdate('isAlarmEnabled', isAlarmEnabled => {
                setLed(ledAlarmEl, isAlarmEnabled);
            });

            // Button
            btnAlarmSetEl.onclick = e => {
                e.preventDefault();
                setServerState('isAlarmEnabled', !globalState.isAlarmEnabled);
            };

            // Set alarm LED on startup
            setLed(ledAlarmEl, globalState.isAlarmEnabled);

            // Debug -----------------------------------------------------------

            onGlobalStateUpdate('globalState', globalState => {
                textGlobalStateEl.innerHTML = JSON.stringify(
                    globalState,
                    null,
                    2,
                );
            });

            // EXTENDED DEVICE CONTROLS ========================================

            // Play alarm
            btnAlarmPlayEl.onclick = e => {
                e.preventDefault();
                emitEvent('action:playAlarm', 'nyanIntro');
            };

            // Force OBA Example Responses
            Object.keys(constants.STOPLIGHT_STATES).forEach(
                stoplightStateKey => {
                    const stoplightState =
                        constants.STOPLIGHT_STATES[stoplightStateKey];
                    const btnObaEgEl = document.querySelector(
                        '.btn-oba-eg-' + stoplightState,
                    );

                    // When one of the OBA example response buttons is clicked,
                    // set the obaApiEgState the corresponding stoplight state
                    // if it's not already, otherwise toggle it off.
                    btnObaEgEl.onclick = e => {
                        e.preventDefault();
                        setServerState(
                            'obaApiEgState',
                            globalState.obaApiEgState !== stoplightState
                                ? stoplightState
                                : null,
                        );
                    };

                    // Highlight a button if its corresponding state is set
                    onGlobalStateUpdate('obaApiEgState', obaApiEgState => {
                        const isSelected = obaApiEgState === stoplightState;
                        btnObaEgEl.style.color = isSelected
                            ? 'darkred'
                            : 'inherit';
                        btnObaEgEl.style.fontWeight = isSelected
                            ? 'bold'
                            : 'inherit';
                    });
                },
            );
        </script>
    </body>
</html>
